# -*- coding: utf-8 -*-
"""[Klasifikasi] Submission Akhir BMLP_Sultan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MzJ1OCsYAKTnbcEy6qhC-ZCRxwLaOCN4

# **Penting**
- Jangan mengubah atau menambahkan cell text yang sudah disediakan, Anda hanya perlu mengerjakan cell code yang sudah disediakan.
- Pastikan seluruh kriteria memiliki output yang sesuai, karena jika tidak ada output dianggap tidak selesai.
- Misal, Anda menggunakan df = df.dropna() silakan gunakan df.isnull().sum() sebagai tanda sudah berhasil. Silakan sesuaikan seluruh output dengan perintah yang sudah disediakan.
- Pastikan Anda melakukan Run All sebelum mengirimkan submission untuk memastikan seluruh cell berjalan dengan baik.
- Pastikan Anda menggunakan variabel df dari awal sampai akhir dan tidak diperbolehkan mengganti nama variabel tersebut.
- Hapus simbol pagar (#) pada kode yang bertipe komentar jika Anda menerapkan kriteria tambahan
- Biarkan simbol pagar (#) jika Anda tidak menerapkan kriteria tambahan
- Pastikan Anda mengerjakan sesuai section yang sudah diberikan tanpa mengubah judul atau header yang disediakan.

# **1. Import Library**
Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import joblib

# Library untuk Evaluasi Model Klasifikasi
from sklearn.metrics import classification_report, confusion_matrix

"""# **2. Memuat Dataset dari Hasil Clustering**
Memuat dataset hasil clustering dari file CSV ke dalam variabel DataFrame.
"""

df = pd.read_csv('sample_data/data_clustering.csv')

df.head()

"""# **3. Data Splitting**
Tahap Data Splitting bertujuan untuk memisahkan dataset menjadi dua bagian: data latih (training set) dan data uji (test set).
"""

y = df["Target"]
X = df.drop(columns=["Target"])

# Membagi data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

"""# **4. Membangun Model Klasifikasi**
Setelah memilih algoritma klasifikasi yang sesuai, langkah selanjutnya adalah melatih model menggunakan data latih.

Berikut adalah rekomendasi tahapannya.
1. Menggunakan algoritma klasifikasi yaitu Decision Tree.
2. Latih model menggunakan data yang sudah dipisah.
"""

dt = DecisionTreeClassifier().fit(X_train, y_train)
nb = GaussianNB().fit(X_train, y_train)

joblib.dump(dt, "decision_tree_model.h5")
joblib.dump(nb, "nb_model.h5")

# Melakukan prediksi
y_pred = dt.predict(X_test)
y_pred_train = dt.predict(X_train)

print(classification_report(y_train, y_pred_train))
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

"""Model decision tree yang memiliki hasil yang sempurna. Hal ini ditandai dengan ukuran evaluasi hingga 1. Selain itu pada Confusion Matrix yang diperoleh juga tidak terlihat nilai selain 0 pada bagian matriks selain diagonal. Hal tersebut menunjukkan keseluruh prediksi pada data testing benar."""

# Melakukan prediksi
y_pred = nb.predict(X_test)
y_pred_train = nb.predict(X_train)

print(classification_report(y_train, y_pred_train))
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

"""# **5. Memenuhi Kriteria Skilled dan Advanced dalam Membangun Model Klasifikasi**

**Biarkan kosong jika tidak menerapkan kriteria skilled atau advanced**
"""

# Melatih model menggunakan algoritma klasifikasi scikit-learn selain Decision Tree.

# Menampilkan hasil evaluasi akurasi, presisi, recall, dan F1-Score pada seluruh algoritma yang sudah dibuat.

# Menyimpan Model Selain Decision Tree
# Model ini bisa lebih dari satu
# import joblib
# joblib.dump(___, 'explore_<Nama Algoritma>_classification.h5')

"""Hyperparameter Tuning Model

Pilih salah satu algoritma yang ingin Anda tuning
"""

# Lakukan Hyperparameter Tuning dan Latih ulang.
# Lakukan dalam satu cell ini saja.

# Menampilkan hasil evaluasi akurasi, presisi, recall, dan F1-Score pada algoritma yang sudah dituning.

# Menyimpan Model hasil tuning
# import joblib
# joblib.dump(__, 'tuning_classification.h5')

"""End of Code"""